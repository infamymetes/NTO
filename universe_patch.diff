diff --git a/StatArbEngine_v1.py b/StatArbEngine_v1.py
index 1111111..2222222 100644
--- a/StatArbEngine_v1.py
+++ b/StatArbEngine_v1.py
@@ def build_universe(args):
-    if getattr(args, "preset_spy_scan", False) and not universe:
-        universe = ["SPY", "QQQ"]
-    elif getattr(args, "preset_sector_scan", False) and not universe:
-        universe = ["SPY", "QQQ", "IWM", "XLK", "XLF", "XLE", "XLV", "XLY", "XLU"]
-    elif getattr(args, "preset_macro_scan", False) and not universe:
-        universe = ["SPY","QQQ","DIA","IWM","XLK","XLF","XLE","XLV","XLY","XLU",
-                    "TLT","IEF","SHY","GLD","SLV","UUP","VIXY","XHB","KRE","XLI","XLB"]
-    elif getattr(args, "preset_fedday", False) and not universe:
-        universe = ["SPY","QQQ","IWM","DIA","XLK","XLF","XLE","XLV","XLY","XLP",
-                    "TLT","IEF","SHY","KRE","XHB","GLD","UUP","VIXY"]
-    elif getattr(args, "preset_alpha_scan", False) and not universe:
-        universe = ["SPY", "QQQ", "IWM"]
+    if getattr(args, "preset_spy_scan", False) and not universe:
+        universe = ["SPY", "QQQ"]
+    elif getattr(args, "preset_sector_scan", False) and not universe:
+        universe = ["SPY","QQQ","IWM","XLK","XLF","XLE","XLV","XLY","XLU"]
+    elif getattr(args, "preset_macro_scan", False) and not universe:
+        universe = ["SPY","QQQ","DIA","IWM","XLK","XLF","XLE","XLV","XLY","XLU",
+                    "TLT","IEF","SHY","GLD","SLV","UUP","VIXY","XHB","KRE","XLI","XLB"]
+    elif getattr(args, "preset_fedday", False) and not universe:
+        universe = ["SPY","QQQ","IWM","DIA","XLK","XLF","XLE","XLV","XLY","XLP",
+                    "TLT","IEF","SHY","KRE","XHB","GLD","UUP","VIXY"]
+    elif getattr(args, "preset_alpha_scan", False) and not universe:
+        universe = ["SPY","QQQ","IWM"]
+    elif getattr(args, "preset_intraday_probe", False) and not universe:
+        universe = ["SPY","QQQ","IWM","DIA"]
+    elif getattr(args, "preset_wtd", False) and not universe:
+        universe = ["SPY","QQQ","RSP","XLK","XLF","XLE","XLV"]
 
-    # Always deduplicate and uppercase
-    universe = list({t.upper() for t in universe})
-
-    # If event config provided a universe, that should take precedence (already handled in main)
-    # Optionally enforce special rules (anchors always present)
-    anchors = {"SPY", "QQQ"}
-    for a in anchors:
-        if a in args.universe and a not in universe:
-            universe.append(a)
-    # Return as sorted list for consistency
-    return sorted(universe)
+    # Deduplicate + uppercase
+    universe = list({t.upper() for t in universe})
+
+    # Always enforce anchors
+    anchors = {"SPY","QQQ"}
+    for a in anchors:
+        if a not in universe:
+            universe.append(a)
+
+    # Optionally prune for liquidity if requested
+    if getattr(args, "min_liquidity", None) is not None:
+        score_map = read_liquidity_scores(getattr(args, "liquidity_file", None))
+        universe = apply_liquidity_filter(universe, args.min_liquidity, score_map)
+
+    return sorted(universe)